From f39ef3ac2fb48072b0e521dc85bbf77dc796ea47 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Fri, 25 Jan 2019 22:54:57 +0000
Subject: [PATCH 17/17] Add CondaEcosystemModifyDllSearchPath()

This changes the DLL search order so that C:\Windows\System32 does not
get searched in before entries in PATH.

Modified twice and backported.
---
 Modules/main.c       | 167 +++++++++++++++++++++++++++++++++++++++++++
 Python/dynload_win.c |   3 +
 2 files changed, 170 insertions(+)

diff --git a/Modules/main.c b/Modules/main.c
index e5357cf9b4..385596f990 100644
--- a/Modules/main.c
+++ b/Modules/main.c
@@ -16,6 +16,10 @@
 #ifdef HAVE_FCNTL_H
 #include <fcntl.h>
 #endif
+#  include <shlwapi.h>
+#  include <string.h>
+#  include <malloc.h>
+#  /* include <libloaderapi.h> */
 #endif
 
 #if (defined(PYOS_OS2) && !defined(PYCC_GCC)) || defined(MS_WINDOWS)
@@ -238,6 +242,166 @@ static int RunMainFromImporter(char *filename)
 }
 
 
+#ifdef MS_WINDOWS
+/* Please do not remove this function. It is needed for testing
+   CondaEcosystemModifyDllSearchPath(). */
+
+/*
+void LoadAndUnloadTestDLL(wchar_t* test_dll)
+{
+    wchar_t test_path[MAX_PATH + 1];
+    HMODULE hDLL = LoadLibraryExW(&test_dll[0], NULL, 0);
+    if (hDLL == NULL)
+    {
+        wchar_t err_msg[256];
+        DWORD err_code = GetLastError();
+        FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
+            NULL, err_code, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
+            err_msg, (sizeof(err_msg) / sizeof(wchar_t)), NULL);
+        wprintf(L"LoadAndUnloadTestDLL() :: ERROR :: Failed to load %ls, error is: %ls\n", &test_dll[0], &err_msg[0]);
+    }
+    GetModuleFileNameW(hDLL, &test_path[0], MAX_PATH);
+    wprintf(L"LoadAndUnloadTestDLL() :: %ls loaded from %ls\n", &test_dll[0], &test_path[0]);
+    if (FreeLibrary(hDLL) == 0)
+    {
+        wchar_t err_msg[256];
+        DWORD err_code = GetLastError();
+        FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
+            NULL, err_code, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
+            err_msg, (sizeof(err_msg) / sizeof(wchar_t)), NULL);
+        wprintf(L"LoadAndUnloadTestDLL() :: ERROR :: Failed to free %ls, error is: %ls\n", &test_dll[0], &err_msg[0]);
+    }
+}
+*/
+
+/*
+    Unless CONDA_DISABLE_DLL_SEARCH_MODIFICATION is set (to anything at all!)
+    this function will modify the DLL search path so that C:\Windows\System32
+    does not appear before entries in PATH. If it does appear in PATH then it
+    gets added at the position it was in in PATH.
+
+    This is achieved via a call to SetDefaultDllDirectories() then calls to
+    AddDllDirectory() for each entry in PATH. We also take the opportunity to
+    clean-up these PATH entries such that any '/' are replaced with '\', no
+    double quotes occour and no PATH entry ends with '\'.
+
+    Caution: Microsoft's documentation says that the search order of entries
+    passed to AddDllDirectory is not respected and arbitrary. I do not think
+    this will be the case but it is worth bearing in mind.
+*/
+
+/* Caching of prior processed PATH environment */
+static wchar_t *sv_path_env = NULL;
+
+int CondaEcosystemModifyDllSearchPath()
+{
+    if (_wgetenv(L"CONDA_DLL_SEARCH_MODIFICATION_DISABLE") == NULL)
+    {
+        int debug_it = _wgetenv(L"CONDA_DLL_SEARCH_MODIFICATION_DEBUG") ? 1 : 0;
+        typedef void (WINAPI *SDDD)(DWORD DirectoryFlags);
+        typedef void (WINAPI *SDD)(PCWSTR SetDir);
+        typedef void (WINAPI *ADD)(PCWSTR NewDirectory);
+        SDDD pSDDD;
+        SDD pSDD;
+        ADD pADD;
+        const wchar_t *path_env = _wgetenv(L"PATH");
+        ssize_t entry_num = 0;
+        ssize_t i;
+        wchar_t **path_entries;
+        wchar_t *path_end;
+        ssize_t num_entries = 1;
+        pSDDD = (SDDD)GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "SetDefaultDllDirectories");
+        pSDD = (SDD)GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "SetDllDirectory");
+        pADD = (ADD)GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "AddDllDirectory");
+        if (pADD == NULL || pSDDD == NULL)
+        {
+            if (debug_it)
+                wprintf(L"CondaEcosystemModifyDllSearchPath() :: WARNING :: Please install KB2533623 from http://go.microsoft.com/fwlink/p/?linkid=217865\n"\
+                        L"CondaEcosystemModifyDllSearchPath() :: WARNING :: to improve conda ecosystem DLL isolation");
+            return 1;
+        }
+
+        /* cache path to avoid multiple adds */
+        if (sv_path_env != NULL && path_env != NULL && !wcscmp(path_env, sv_path_env))
+            return 0;
+        if (sv_path_env != NULL)
+        {
+            free(sv_path_env);
+            /* Reset to default search order */
+            pSDD(NULL);
+        }
+        sv_path_env = path_env == NULL ? NULL : _wcsdup(path_env);
+
+        if (path_env != NULL)
+        {
+            size_t len = wcslen(path_env);
+            wchar_t *path = (wchar_t *)alloca((len + 1) * sizeof(wchar_t));
+            if (debug_it) wprintf(L"CondaEcosystemModifyDllSearchPath() :: PATH=%ls\n\b", path_env);
+            memcpy(path, path_env, (len + 1) * sizeof(wchar_t));
+            /* Convert any / to \ */
+            /* Replace slash with backslash */
+            while ((path_end = wcschr(path, L'/')))
+                *path_end = L'\\';
+            /* Remove all double quotes */
+            while ((path_end = wcschr(path, L'"')))
+                memmove(path_end, path_end + 1, sizeof(wchar_t) * (len-- - (path_end - path)));
+            /* Remove all leading and double ';' */
+            while ( *path == L';' )
+                memmove(path, path + 1, sizeof(wchar_t) * len--);
+            while ((path_end = wcsstr(path, L";;")))
+                memmove(path_end, path_end + 1, sizeof(wchar_t) * (len-- - (path_end - path)));
+
+            if (len == 0)
+                return 2;
+
+            /* Count the number of path entries */
+            path_end = path;
+            while ((path_end = wcschr(path_end, L';')))
+            {
+               ++num_entries;
+               ++path_end;
+            }
+
+            path_entries = (wchar_t **)alloca((num_entries) * sizeof(wchar_t *));
+            path_end = wcschr(path, L';');
+            /* It does not matter what flags are passed to SetDefaultDllDirectories(), only that more than
+               one flag is passed; this seems like an odd API decision.
+            */
+            pSDDD(LOAD_LIBRARY_SEARCH_DEFAULT_DIRS);
+            while (path != NULL)
+            {
+                if (path_end != NULL)
+                {
+                    *path_end = L'\0';
+                    /* Hygiene, no \ at the end */
+                    while (path_end > path && path_end[-1] == L'\\')
+                    {
+                        --path_end;
+                        *path_end = L'\0';
+                    }
+                }
+                if (wcslen(path) != 0)
+                    path_entries[entry_num++] = path;
+                path = path_end;
+                if (path != NULL)
+                {
+                    while (*path == L'\0')
+                       ++path;
+                    path_end = wcschr(path, L';');
+                }
+            }
+            for (i = num_entries - 1; i > -1; --i)
+            {
+                if (debug_it) wprintf(L"CondaEcosystemModifyDllSearchPath() :: AddDllDirectory(%ls)\n", path_entries[i]);
+                pADD(path_entries[i]);
+            }
+        }
+    }
+    return 0;
+}
+#endif
+
+
 /* Main program */
 
 int
@@ -258,6 +422,9 @@ Py_Main(int argc, char **argv)
     int saw_unbuffered_flag = 0;
     PyCompilerFlags cf;
 
+#ifdef MS_WINDOWS
+    CondaEcosystemModifyDllSearchPath();
+#endif
     cf.cf_flags = 0;
 
     orig_argc = argc;           /* For Py_GetArgcArgv() */
diff --git a/Python/dynload_win.c b/Python/dynload_win.c
index 4e5555e917..cb14d2eefa 100644
--- a/Python/dynload_win.c
+++ b/Python/dynload_win.c
@@ -191,6 +191,9 @@ dl_funcptr _PyImport_GetDynLoadFunc(const char *fqname, const char *shortname,
                             pathbuf,
                             &dummy)) {
             ULONG_PTR cookie = _Py_ActivateActCtx();
+            /* This resyncs values in PATH to AddDllDirectory() */
+            extern int CondaEcosystemModifyDllSearchPath();
+            CondaEcosystemModifyDllSearchPath();
             /* XXX This call doesn't exist in Windows CE */
             hDLL = LoadLibraryEx(pathname, NULL,
                                  LOAD_WITH_ALTERED_SEARCH_PATH);
-- 
2.17.2 (Apple Git-113)

